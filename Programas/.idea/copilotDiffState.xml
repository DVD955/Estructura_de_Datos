<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ProgramasEstructuradeDatos/src/mx/edu/uttt/promedios/calificacionesvector.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProgramasEstructuradeDatos/src/mx/edu/uttt/promedios/calificacionesvector.java" />
              <option name="originalContent" value="package mx.edu.uttt.promedios;&#10;&#10;// Clase para manejar un arreglo de calificaciones&#10;public class calificacionesvector {&#10;    // Arreglo para guardar las calificaciones&#10;    private double[] calificaciones;&#10;    // Tamaño máximo&#10;    private int TAMANIO = 5;&#10;    // Acumulador de elementos&#10;    private int ac = 0;&#10;&#10;    // Constructor por defecto&#10;    public calificacionesvector() {&#10;        this.calificaciones = new double[this.TAMANIO];&#10;    }&#10;&#10;    // Constructor con tamaño personalizado&#10;    public calificacionesvector(int tamanio) {&#10;        if (tamanio &lt;= 0)&#10;            this.calificaciones = new double[this.TAMANIO];&#10;        else&#10;            this.calificaciones = new double[tamanio];&#10;    }&#10;&#10;    // Agregar una calificación&#10;    public void agregarCalificacion(double calificacion) {&#10;        if (!estaLleno()) {&#10;            this.calificaciones[ac] = calificacion;&#10;            ac = ac + 1;&#10;        } else {&#10;            System.out.println(&quot;El vector está lleno&quot;);&#10;        }&#10;    }&#10;&#10;    // Verificar si el vector está lleno&#10;    public boolean estaLleno() {&#10;        return ac &gt;= calificaciones.length;&#10;    }&#10;&#10;    // Calcular el promedio&#10;    public double calcularPromedio() {&#10;        if (ac == 0) return 0;&#10;        double suma = 0;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            suma = suma + calificaciones[i];&#10;            i = i + 1;&#10;        }&#10;        return suma / ac;&#10;    }&#10;&#10;    // Contar cuántas calificaciones son mayores al promedio&#10;    public int cantidadMayoresQuePromedio() {&#10;        double promedio = calcularPromedio();&#10;        int cuenta = 0;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            if (calificaciones[i] &gt; promedio) {&#10;                cuenta = cuenta + 1;&#10;            }&#10;            i = i + 1;&#10;        }&#10;        return cuenta;&#10;    }&#10;&#10;    // Obtener arreglo de calificaciones mayores al promedio&#10;    public double[] mayoresQuePromedio() {&#10;        double promedio = calcularPromedio();&#10;        int cuenta = cantidadMayoresQuePromedio();&#10;        double[] mayores = new double[cuenta];&#10;        int idx = 0;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            if (calificaciones[i] &gt; promedio) {&#10;                mayores[idx] = calificaciones[i];&#10;                idx = idx + 1;&#10;            }&#10;            i = i + 1;&#10;        }&#10;        return mayores;&#10;    }&#10;&#10;    // Mostrar calificaciones mayores al promedio como texto&#10;    public String imprimirMayoresQuePromedio() {&#10;        double[] mayores = mayoresQuePromedio();&#10;        if (mayores.length == 0) return &quot;no hay valores mayor al promedio\n&quot;;&#10;        String resultado = &quot;&quot;;&#10;        for (int i = 0; i &lt; mayores.length; i++) {&#10;            resultado = resultado + mayores[i] + &quot;\n&quot;;&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    // Mostrar todas las calificaciones&#10;    public String imprimir() {&#10;        String resultado = &quot;&quot;;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            resultado = resultado + &quot;Calificación &quot; + (i + 1) + &quot;: &quot; + calificaciones[i] + &quot;\n&quot;;&#10;            i = i + 1;&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    // Obtener cantidad de calificaciones&#10;    public int getCantidad() {&#10;        return ac;&#10;    }&#10;&#10;    // Obtener el promedio&#10;    public double getPromedio() {&#10;        return calcularPromedio();&#10;    }&#10;&#10;    // Obtener todas las calificaciones como arreglo de double&#10;    public double[] obtenerCalificaciones() {&#10;        double[] resultado = new double[ac];&#10;        for (int i = 0; i &lt; ac; i++) {&#10;            resultado[i] = calificaciones[i];&#10;        }&#10;        return resultado;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package mx.edu.uttt.promedios;&#10;&#10;// Clase para manejar un arreglo de calificaciones&#10;public class calificacionesvector {&#10;    // Arreglo para guardar las calificaciones&#10;    private double[] calificaciones;&#10;    // Tamaño máximo&#10;    private int TAMANIO = 5;&#10;    // Acumulador de elementos&#10;    private int ac = 0;&#10;&#10;    // Constructor por defecto&#10;    public calificacionesvector() {&#10;        this.calificaciones = new double[this.TAMANIO];&#10;    }&#10;&#10;    // Constructor con tamaño personalizado&#10;    public calificacionesvector(int tamanio) {&#10;        if (tamanio &lt;= 0)&#10;            this.calificaciones = new double[this.TAMANIO];&#10;        else&#10;            this.calificaciones = new double[tamanio];&#10;    }&#10;&#10;    // Agregar una calificación&#10;    public void agregarCalificacion(double calificacion) {&#10;        if (!estaLleno()) {&#10;            this.calificaciones[ac] = calificacion;&#10;            ac = ac + 1;&#10;        } else {&#10;            System.out.println(&quot;El vector está lleno&quot;);&#10;        }&#10;    }&#10;&#10;    // Verificar si el vector está lleno&#10;    public boolean estaLleno() {&#10;        return ac &gt;= calificaciones.length;&#10;    }&#10;&#10;    // Calcular el promedio&#10;    public double calcularPromedio() {&#10;        if (ac == 0) return 0;&#10;        double suma = 0;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            suma = suma + calificaciones[i];&#10;            i = i + 1;&#10;        }&#10;        return suma / ac;&#10;    }&#10;&#10;    // Contar cuántas calificaciones son mayores al promedio&#10;    public int cantidadMayoresQuePromedio() {&#10;        double promedio = calcularPromedio();&#10;        int cuenta = 0;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            if (calificaciones[i] &gt; promedio) {&#10;                cuenta = cuenta + 1;&#10;            }&#10;            i = i + 1;&#10;        }&#10;        return cuenta;&#10;    }&#10;&#10;    // Obtener arreglo de calificaciones mayores al promedio&#10;    public double[] mayoresQuePromedio() {&#10;        double promedio = calcularPromedio();&#10;        int cuenta = cantidadMayoresQuePromedio();&#10;        double[] mayores = new double[cuenta];&#10;        int idx = 0;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            if (calificaciones[i] &gt; promedio) {&#10;                mayores[idx] = calificaciones[i];&#10;                idx = idx + 1;&#10;            }&#10;            i = i + 1;&#10;        }&#10;        return mayores;&#10;    }&#10;&#10;    // Mostrar calificaciones mayores al promedio como texto&#10;    public String imprimirMayoresQuePromedio() {&#10;        double[] mayores = mayoresQuePromedio();&#10;        if (mayores.length == 0) return &quot;no hay valores mayor al promedio\n&quot;;&#10;        String resultado = &quot;&quot;;&#10;        for (int i = 0; i &lt; mayores.length; i++) {&#10;            resultado = resultado + mayores[i] + &quot;\n&quot;;&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    // Mostrar todas las calificaciones&#10;    public String imprimir() {&#10;        String resultado = &quot;&quot;;&#10;        int i = 0;&#10;        while (i &lt; ac) {&#10;            resultado = resultado + &quot;Calificación &quot; + (i + 1) + &quot;: &quot; + calificaciones[i] + &quot;\n&quot;;&#10;            i = i + 1;&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    // Obtener cantidad de calificaciones&#10;    public int getCantidad() {&#10;        return ac;&#10;    }&#10;&#10;    // Obtener el promedio&#10;    public double getPromedio() {&#10;        return calcularPromedio();&#10;    }&#10;&#10;    // Obtener todas las calificaciones como arreglo de double&#10;    public double[] obtenerCalificaciones() {&#10;        double[] resultado = new double[ac];&#10;        for (int i = 0; i &lt; ac; i++) {&#10;            resultado[i] = calificaciones[i];&#10;        }&#10;        return resultado;&#10;    }&#10;&#10;    // Permite actualizar el acumulador después de eliminar una calificación&#10;    public void setCantidad(int nuevaCantidad) {&#10;        this.ac = nuevaCantidad;&#10;    }&#10;&#10;    // Método para obtener una calificación por índice&#10;    public double getCalificacion(int index) {&#10;        if (index &gt;= 0 &amp;&amp; index &lt; ac) {&#10;            return calificaciones[index];&#10;        }&#10;        throw new IndexOutOfBoundsException(&quot;Índice fuera de rango&quot;);&#10;    }&#10;&#10;    // Método para establecer una calificación en un índice específico&#10;    public void setCalificacion(int index, double valor) {&#10;        if (index &gt;= 0 &amp;&amp; index &lt; ac) {&#10;            calificaciones[index] = valor;&#10;        } else {&#10;            throw new IndexOutOfBoundsException(&quot;Índice fuera de rango&quot;);&#10;        }&#10;    }&#10;&#10;    // Método para eliminar una calificación por índice&#10;    public void eliminarCalificacion(int index) {&#10;        if (index &gt;= 0 &amp;&amp; index &lt; ac) {&#10;            for (int i = index; i &lt; ac - 1; i++) {&#10;                calificaciones[i] = calificaciones[i + 1];&#10;            }&#10;            calificaciones[ac - 1] = 0; // Limpiar el último elemento&#10;            ac--;&#10;        } else {&#10;            throw new IndexOutOfBoundsException(&quot;Índice fuera de rango&quot;);&#10;        }&#10;    }&#10;&#10;    // Método para obtener el tamaño máximo del arreglo&#10;    public int getTamanio() {&#10;        return calificaciones.length;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>